-- Create database
CREATE DATABASE IF NOT EXISTS edusystem;
USE edusystem;

-- Users Table
CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(20) DEFAULT 'User'
);

-- Sample users
INSERT IGNORE INTO users (id, username, email, password, role) VALUES
(1, 'admin', 'admin@example.com', '$2y$10$E3jJm/7uY9hDufEfL4xu6OAlJMdH7ZbYKuPK7uQ2y6d0Zc59J1vZy', 'Admin'), -- password: admin123
(2, 'john_doe', 'john@example.com', '$2y$10$E3jJm/7uY9hDufEfL4xu6OAlJMdH7ZbYKuPK7uQ2y6d0Zc59J1vZy', 'User'),
(3, 'teacher1', 'teacher@example.com', '$2y$10$E3jJm/7uY9hDufEfL4xu6OAlJMdH7ZbYKuPK7uQ2y6d0Zc59J1vZy', 'Editor');

-- Contact Messages Table
CREATE TABLE IF NOT EXISTS contact_messages (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  subject VARCHAR(255),
  message TEXT,
  submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Sample messages
INSERT IGNORE INTO contact_messages (id, name, email, subject, message) VALUES
(1, 'Alice', 'alice@mail.com', 'Query', 'How to reset password?'),
(2, 'Bob', 'bob@mail.com', 'Feedback', 'Great platform!');

-- Grades Table
CREATE TABLE IF NOT EXISTS grades (
  id INT AUTO_INCREMENT PRIMARY KEY,
  student_id INT,
  assignment_name VARCHAR(100),
  score FLOAT,
  weight FLOAT,
  FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Sample grades
INSERT IGNORE INTO grades (id, student_id, assignment_name, score, weight) VALUES
(1, 2, 'Assignment 1', 85, 0.2),
(2, 2, 'Midterm', 78, 0.3),
(3, 2, 'Assignment 2', 92, 0.2),
(4, 2, 'Final Exam', 88, 0.3);

-- Courses Table
CREATE TABLE IF NOT EXISTS courses (
  id INT AUTO_INCREMENT PRIMARY KEY,
  code VARCHAR(10),
  name VARCHAR(100),
  credits INT
);

-- Sample courses
INSERT IGNORE INTO courses (id, code, name, credits) VALUES
(1, 'CS101', 'Intro to CS', 3),
(2, 'MATH201', 'Calculus I', 4),
(3, 'PHY110', 'Physics', 3),
(4, 'ENG301', 'English Composition', 2);

-- Fee Payments Table
CREATE TABLE IF NOT EXISTS fee_payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  semester VARCHAR(20),
  total_fee INT,
  paid_amount INT,
  due_date DATE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Sample fees
INSERT IGNORE INTO fee_payments (id, user_id, semester, total_fee, paid_amount, due_date) VALUES
(1, 2, 'Spring 2025', 30000, 10000, '2025-06-15');

-- Timetable Table (optional if dynamic)
CREATE TABLE IF NOT EXISTS timetable (
  id INT AUTO_INCREMENT PRIMARY KEY,
  day VARCHAR(10),
  time_slot VARCHAR(20),
  subject VARCHAR(50),
  room VARCHAR(20)
);

-- Sample timetable data
INSERT IGNORE INTO timetable (id, day, time_slot, subject, room) VALUES
(1, 'Mon', '9:00–10:00', 'Math', 'A101'),
(2, 'Mon', '10:00–11:00', 'English', 'D301'),
(3, 'Tue', '9:00–10:00', 'Physics', 'B201'),
(4, 'Wed', '11:00–12:00', 'Free', ''),
(5, 'Thu', '1:00–2:00', 'Physics', 'B201');

-- Reports Table (optional)
CREATE TABLE IF NOT EXISTS reports (
  id INT AUTO_INCREMENT PRIMARY KEY,
  student_id INT,
  average FLOAT,
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (student_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Sample report
INSERT IGNORE INTO reports (id, student_id, average, comment) VALUES
(1, 2, 85.75, 'Excellent improvement over the term.');

-- Registration Table (optional for course selection)
CREATE TABLE IF NOT EXISTS registrations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  course_id INT,
  registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (course_id) REFERENCES courses(id)
);

-- Sample registration
INSERT IGNORE INTO registrations (user_id, course_id) VALUES
(2, 1),
(2, 3);
